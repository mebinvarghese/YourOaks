"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
var ProjectType;
(function (ProjectType) {
    ProjectType["Application"] = "application";
    ProjectType["Library"] = "library";
})(ProjectType = exports.ProjectType || (exports.ProjectType = {}));
var Builders;
(function (Builders) {
    Builders["AppShell"] = "@angular-devkit/build-angular:app-shell";
    Builders["Server"] = "@angular-devkit/build-angular:server";
    Builders["Browser"] = "@angular-devkit/build-angular:browser";
    Builders["Karma"] = "@angular-devkit/build-angular:karma";
    Builders["TsLint"] = "@angular-devkit/build-angular:tslint";
    Builders["NgPackagr"] = "@angular-devkit/build-ng-packagr:build";
    Builders["DevServer"] = "@angular-devkit/build-angular:dev-server";
    Builders["ExtractI18n"] = "@angular-devkit/build-angular:extract-i18n";
    Builders["Protractor"] = "@angular-devkit/build-angular:protractor";
})(Builders = exports.Builders || (exports.Builders = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya3NwYWNlLW1vZGVscy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvc2NoZW1hdGljcy9hbmd1bGFyL3V0aWxpdHkvd29ya3NwYWNlLW1vZGVscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7OztHQU1HOztBQUlILElBQVksV0FHWDtBQUhELFdBQVksV0FBVztJQUNuQiwwQ0FBMkIsQ0FBQTtJQUMzQixrQ0FBbUIsQ0FBQTtBQUN2QixDQUFDLEVBSFcsV0FBVyxHQUFYLG1CQUFXLEtBQVgsbUJBQVcsUUFHdEI7QUFFRCxJQUFZLFFBVVg7QUFWRCxXQUFZLFFBQVE7SUFDaEIsZ0VBQW9ELENBQUE7SUFDcEQsMkRBQStDLENBQUE7SUFDL0MsNkRBQWlELENBQUE7SUFDakQseURBQTZDLENBQUE7SUFDN0MsMkRBQStDLENBQUE7SUFDL0MsZ0VBQW9ELENBQUE7SUFDcEQsa0VBQXNELENBQUE7SUFDdEQsc0VBQTBELENBQUE7SUFDMUQsbUVBQXVELENBQUE7QUFDM0QsQ0FBQyxFQVZXLFFBQVEsR0FBUixnQkFBUSxLQUFSLGdCQUFRLFFBVW5CIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgeyBleHBlcmltZW50YWwgfSBmcm9tICdAYW5ndWxhci1kZXZraXQvY29yZSc7XG5cbmV4cG9ydCBlbnVtIFByb2plY3RUeXBlIHtcbiAgICBBcHBsaWNhdGlvbiA9ICdhcHBsaWNhdGlvbicsXG4gICAgTGlicmFyeSA9ICdsaWJyYXJ5Jyxcbn1cblxuZXhwb3J0IGVudW0gQnVpbGRlcnMge1xuICAgIEFwcFNoZWxsID0gJ0Bhbmd1bGFyLWRldmtpdC9idWlsZC1hbmd1bGFyOmFwcC1zaGVsbCcsXG4gICAgU2VydmVyID0gJ0Bhbmd1bGFyLWRldmtpdC9idWlsZC1hbmd1bGFyOnNlcnZlcicsXG4gICAgQnJvd3NlciA9ICdAYW5ndWxhci1kZXZraXQvYnVpbGQtYW5ndWxhcjpicm93c2VyJyxcbiAgICBLYXJtYSA9ICdAYW5ndWxhci1kZXZraXQvYnVpbGQtYW5ndWxhcjprYXJtYScsXG4gICAgVHNMaW50ID0gJ0Bhbmd1bGFyLWRldmtpdC9idWlsZC1hbmd1bGFyOnRzbGludCcsXG4gICAgTmdQYWNrYWdyID0gJ0Bhbmd1bGFyLWRldmtpdC9idWlsZC1uZy1wYWNrYWdyOmJ1aWxkJyxcbiAgICBEZXZTZXJ2ZXIgPSAnQGFuZ3VsYXItZGV2a2l0L2J1aWxkLWFuZ3VsYXI6ZGV2LXNlcnZlcicsXG4gICAgRXh0cmFjdEkxOG4gPSAnQGFuZ3VsYXItZGV2a2l0L2J1aWxkLWFuZ3VsYXI6ZXh0cmFjdC1pMThuJyxcbiAgICBQcm90cmFjdG9yID0gJ0Bhbmd1bGFyLWRldmtpdC9idWlsZC1hbmd1bGFyOnByb3RyYWN0b3InLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVSZXBsYWNlbWVudHMge1xuICAgIHJlcGxhY2U6IHN0cmluZztcbiAgICB3aXRoOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJvd3NlckJ1aWxkZXJCYXNlT3B0aW9ucyB7XG4gICAgbWFpbjogc3RyaW5nO1xuICAgIHRzQ29uZmlnOiBzdHJpbmc7XG4gICAgZmlsZVJlcGxhY2VtZW50cz86IEZpbGVSZXBsYWNlbWVudHNbXTtcbiAgICBvdXRwdXRQYXRoPzogc3RyaW5nO1xuICAgIGluZGV4Pzogc3RyaW5nO1xuICAgIHBvbHlmaWxsczogc3RyaW5nO1xuICAgIGFzc2V0cz86IG9iamVjdFtdO1xuICAgIHN0eWxlcz86IHN0cmluZ1tdO1xuICAgIHNjcmlwdHM/OiBzdHJpbmdbXTtcbiAgICBzb3VyY2VNYXA/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyb3dzZXJCdWlsZGVyT3B0aW9ucyBleHRlbmRzIEJyb3dzZXJCdWlsZGVyQmFzZU9wdGlvbnMge1xuICAgIHNlcnZpY2VXb3JrZXI/OiBib29sZWFuO1xuICAgIG9wdGltaXphdGlvbj86IGJvb2xlYW47XG4gICAgb3V0cHV0SGFzaGluZz86ICdhbGwnO1xuICAgIGV4dHJhY3RDc3M/OiBib29sZWFuO1xuICAgIG5hbWVkQ2h1bmtzPzogYm9vbGVhbjtcbiAgICBhb3Q/OiBib29sZWFuO1xuICAgIGV4dHJhY3RMaWNlbnNlcz86IGJvb2xlYW47XG4gICAgdmVuZG9yQ2h1bms/OiBib29sZWFuO1xuICAgIGJ1aWxkT3B0aW1pemVyPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZXJ2ZUJ1aWxkZXJPcHRpb25zIHtcbiAgICBicm93c2VyVGFyZ2V0OiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIExpYnJhcnlCdWlsZGVyT3B0aW9ucyB7XG4gICAgdHNDb25maWc6IHN0cmluZztcbiAgICBwcm9qZWN0OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VydmVyQnVpbGRlck9wdGlvbnMge1xuICAgIG91dHB1dFBhdGg6IHN0cmluZztcbiAgICB0c0NvbmZpZzogc3RyaW5nO1xuICAgIG1haW46IHN0cmluZztcbiAgICBmaWxlUmVwbGFjZW1lbnRzPzogRmlsZVJlcGxhY2VtZW50c1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcFNoZWxsQnVpbGRlck9wdGlvbnMge1xuICAgIGJyb3dzZXJUYXJnZXQ6IHN0cmluZztcbiAgICBzZXJ2ZXJUYXJnZXQ6IHN0cmluZztcbiAgICByb3V0ZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRlc3RCdWlsZGVyT3B0aW9ucyBleHRlbmRzIFBhcnRpYWw8QnJvd3NlckJ1aWxkZXJCYXNlT3B0aW9ucz4ge1xuICAgIGthcm1hQ29uZmlnOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGludEJ1aWxkZXJPcHRpb25zIHtcbiAgICB0c0NvbmZpZzogc3RyaW5nW10gfCBzdHJpbmc7XG4gICAgZXhjbHVkZT86IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV4dHJhY3RJMThuT3B0aW9ucyB7XG4gICAgYnJvd3NlclRhcmdldDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEUyRU9wdGlvbnMge1xuICAgIHByb3RyYWN0b3JDb25maWc6IHN0cmluZztcbiAgICBkZXZTZXJ2ZXJUYXJnZXQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCdWlsZGVyVGFyZ2V0PFRCdWlsZGVyIGV4dGVuZHMgQnVpbGRlcnMsIFRPcHRpb25zPiB7XG4gICAgYnVpbGRlcjogVEJ1aWxkZXI7XG4gICAgb3B0aW9uczogVE9wdGlvbnM7XG4gICAgY29uZmlndXJhdGlvbnM/OiB7XG4gICAgICAgIHByb2R1Y3Rpb246IFBhcnRpYWw8VE9wdGlvbnM+O1xuICAgICAgICBba2V5OiBzdHJpbmddOiBQYXJ0aWFsPFRPcHRpb25zPjtcbiAgICB9O1xufVxuXG5leHBvcnQgdHlwZSBMaWJyYXJ5QnVpbGRlclRhcmdldCA9IEJ1aWxkZXJUYXJnZXQ8QnVpbGRlcnMuTmdQYWNrYWdyLCBMaWJyYXJ5QnVpbGRlck9wdGlvbnM+O1xuZXhwb3J0IHR5cGUgQnJvd3NlckJ1aWxkZXJUYXJnZXQgPSBCdWlsZGVyVGFyZ2V0PEJ1aWxkZXJzLkJyb3dzZXIsIEJyb3dzZXJCdWlsZGVyT3B0aW9ucz47XG5leHBvcnQgdHlwZSBTZXJ2ZXJCdWlsZGVyVGFyZ2V0ID0gQnVpbGRlclRhcmdldDxCdWlsZGVycy5TZXJ2ZXIsIFNlcnZlckJ1aWxkZXJPcHRpb25zPjtcbmV4cG9ydCB0eXBlIEFwcFNoZWxsQnVpbGRlclRhcmdldCA9IEJ1aWxkZXJUYXJnZXQ8QnVpbGRlcnMuQXBwU2hlbGwsIEFwcFNoZWxsQnVpbGRlck9wdGlvbnM+O1xuZXhwb3J0IHR5cGUgTGludEJ1aWxkZXJUYXJnZXQgPSBCdWlsZGVyVGFyZ2V0PEJ1aWxkZXJzLlRzTGludCwgTGludEJ1aWxkZXJPcHRpb25zPjtcbmV4cG9ydCB0eXBlIFRlc3RCdWlsZGVyVGFyZ2V0ID0gQnVpbGRlclRhcmdldDxCdWlsZGVycy5LYXJtYSwgVGVzdEJ1aWxkZXJPcHRpb25zPjtcbmV4cG9ydCB0eXBlIFNlcnZlQnVpbGRlclRhcmdldCA9IEJ1aWxkZXJUYXJnZXQ8QnVpbGRlcnMuRGV2U2VydmVyLCBTZXJ2ZUJ1aWxkZXJPcHRpb25zPjtcbmV4cG9ydCB0eXBlIEV4dHJhY3RJMThuQnVpbGRlclRhcmdldCA9IEJ1aWxkZXJUYXJnZXQ8QnVpbGRlcnMuRXh0cmFjdEkxOG4sIEV4dHJhY3RJMThuT3B0aW9ucz47XG5leHBvcnQgdHlwZSBFMkVCdWlsZGVyVGFyZ2V0ID0gQnVpbGRlclRhcmdldDxCdWlsZGVycy5Qcm90cmFjdG9yLCBFMkVPcHRpb25zPjtcblxuZXhwb3J0IGludGVyZmFjZSBXb3Jrc3BhY2VTY2hlbWEgZXh0ZW5kcyBleHBlcmltZW50YWwud29ya3NwYWNlLldvcmtzcGFjZVNjaGVtYSB7XG4gICAgcHJvamVjdHM6IHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogV29ya3NwYWNlUHJvamVjdDxQcm9qZWN0VHlwZS5BcHBsaWNhdGlvbiB8IFByb2plY3RUeXBlLkxpYnJhcnk+O1xuICAgIH07XG59XG5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbmV4cG9ydCBpbnRlcmZhY2UgV29ya3NwYWNlUHJvamVjdDxUUHJvamVjdFR5cGUgZXh0ZW5kcyBQcm9qZWN0VHlwZSA9IFByb2plY3RUeXBlLkFwcGxpY2F0aW9uPlxuICAgIGV4dGVuZHMgZXhwZXJpbWVudGFsLndvcmtzcGFjZS5Xb3Jrc3BhY2VQcm9qZWN0IHtcbiAgICAvKipcbiAgICAqIFByb2plY3QgdHlwZS5cbiAgICAqL1xuICAgIHByb2plY3RUeXBlOiBQcm9qZWN0VHlwZTtcblxuICAgIC8qKlxuICAgICAqIFRvb2wgb3B0aW9ucy5cbiAgICAgKi9cbiAgICBhcmNoaXRlY3Q/OiBXb3Jrc3BhY2VUYXJnZXRzPFRQcm9qZWN0VHlwZT47XG4gICAgLyoqXG4gICAgICogVG9vbCBvcHRpb25zLlxuICAgICAqL1xuICAgIHRhcmdldHM/OiBXb3Jrc3BhY2VUYXJnZXRzPFRQcm9qZWN0VHlwZT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV29ya3NwYWNlVGFyZ2V0czxUUHJvamVjdFR5cGUgZXh0ZW5kcyBQcm9qZWN0VHlwZSA9IFByb2plY3RUeXBlLkFwcGxpY2F0aW9uPiB7XG4gICAgYnVpbGQ/OiBUUHJvamVjdFR5cGUgZXh0ZW5kcyBQcm9qZWN0VHlwZS5MaWJyYXJ5ID8gTGlicmFyeUJ1aWxkZXJUYXJnZXQgOiBCcm93c2VyQnVpbGRlclRhcmdldDtcbiAgICBzZXJ2ZXI/OiBTZXJ2ZXJCdWlsZGVyVGFyZ2V0O1xuICAgIGxpbnQ/OiBMaW50QnVpbGRlclRhcmdldDtcbiAgICB0ZXN0PzogVGVzdEJ1aWxkZXJUYXJnZXQ7XG4gICAgc2VydmU/OiBTZXJ2ZUJ1aWxkZXJUYXJnZXQ7XG4gICAgZTJlPzogRTJFQnVpbGRlclRhcmdldDtcbiAgICAnYXBwLXNoZWxsJz86IEFwcFNoZWxsQnVpbGRlclRhcmdldDtcbiAgICAnZXh0cmFjdC1pMThuJz86IEV4dHJhY3RJMThuQnVpbGRlclRhcmdldDtcbiAgICBba2V5OiBzdHJpbmddOiB1bmtub3duO1xufVxuIl19